<?php

/**
 * @file
 * Drupal integration with the Vegas jQuery Plugin.
 */

/**
 * Shows vegas on every page except the listed pages.
 */
define('VEGAS_VISIBILITY_NOTLISTED', 0);

/**
 * Shows vegas on only the listed pages.
 */
define('VEGAS_VISIBILITY_LISTED', 1);

/**
 * Shows vegas if the associated PHP code returns TRUE.
 */
define('VEGAS_VISIBILITY_PHP', 2);


/**
 * Implements hook_help().
 */
function vegas_help($path, $arg) {
  switch ($path) {
    case 'admin/help#vegas':
      return '<p>'. t('Implements the beautiful <a href="@vegas" target="_blank">jQuery Vegas plugin</a> to provide options for multiple fullscreen background images and transitions via the Drupal admin UI. Make sure you have downloaded the latest <a href="@vegas" target="_blank">jQuery Vegas plugin</a> and extracted the <em>./dist</em> folder from its folder tree into your <em>./libraries</em> folder and renamed it from <em>dist</em> to <em>vegas</em>. Your <em>./libraries</em> path to vegas should finally be now: <em>./libaries/vegas/vegas.js</em> to make the vegas module find the required jQuery vegas plugin. For more information go to the vegas module project page on <a href="@drupal" target="_blank">drupal.org</a>.', array('@vegas' => 'http://github.com/jaysalvat/vegas', '@drupal' => 'http://drupal.org/project/vegas')) .'</p>';
    case 'admin/appearance/vegas':
      return '<p>'. t('Set up beautiful background images and slideshows by uploading images, and configuring the fade and delay effects with the <a href="@vegas">Vegas jQuery Plugin</a>.', array('@vegas' => 'http://github.com/jaysalvat/vegas')) .'</p>';
  }
}

/**
 * Implements hook_permission().
 */
function vegas_permission() {
  return array(
    'administer vegas' => array(
      'title' => t('Administer Vegas'),
      'description' => t('Configure the background slideshows.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function vegas_menu() {
  $items = array();
  $items['admin/appearance/vegas'] = array(
    'title' => 'Vegas',
    'description' => 'Configure the fullscreen background slideshows for use with Vegas.',
    'access arguments' => array('administer vegas'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vegas_admin_settings'),
    'file' => 'vegas.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1000,
  );
  return $items;
}

/**
 * Implements hook_init().
 */
function vegas_init() {
  if (!vegas_is_enabled()) {
    return;
  }

  // Load all the images to be added to Vegas.
  $backgrounds = array();
  $fade = variable_get('vegas_fade', 0);
  for ($i = 0; $i < 10; $i++) {
    $fid = variable_get('vegas_images_' . $i, '');
    if (!empty($fid)) {
      $image = file_load($fid);
      if ($image) {
        $background = array(
          'src' => file_create_url($image->uri),
        );
        if (!empty($fade)) {
          $background['fade'] = intval($fade);
        }
        $backgrounds[] = $background;
      }
    }
  }

  // If there are images to show, then load the Vegas JavaScript as well.
  if (!empty($backgrounds)) {

    // See if we are to shuffle the backgrounds.
    if (variable_get('vegas_shuffle', TRUE)) {
      shuffle($backgrounds);
    }

    // Add all the Vegas JavaScript to the page.
    drupal_load('module', 'libraries');
    libraries_load('vegas');

    // Prepare the JavaScript settings.
    $settings = array(
      'slides' => $backgrounds,
    );

    // Load up the delay amount.
    $delay = variable_get('vegas_delay', '5000');
    $settings['delay'] = intval($delay);

    // Load the overlay, if possible.
    $fid = variable_get('vegas_overlay', '');
    if (!empty($fid)) {
      $image = file_load($fid);
      if ($image) {
        $settings['overlay'] = file_create_url($image->uri);
      }
    }

    // Add it all to the page.
    drupal_add_js(array('vegas' => $settings), 'setting');
  }
}

/**
 * Implements hook_libraries_info().
 */
function vegas_libraries_info() {
  $libraries['vegas'] = array(
    'name' => 'Vegas jQuery Plugin',
    'vendor url' => 'https://github.com/jaysalvat/vegas',
    'download url' => 'https://github.com/jaysalvat/vegas/archive/master.zip',
    'version arguments' => array(
      'file' => 'vegas.js',
      'pattern' => '/\s+v?([0-9\.]+)/',
      'lines' => 10,
      'cols' => 30,
    ),
    'files' => array(
      'js' => array(
        'vegas.min.js',
      ),
      'css' => array(
        'vegas.min.css',
      ),
    ),
    'integration files' => array(
      'vegas' => array(
        'js' => array('vegas.js'),
      ),
    ),
  );
  return $libraries;
}

/**
 * Check if Vegas should be enabled.
 */
function vegas_is_enabled() {
  foreach (module_implements('vegas_enable') as $module) {
    $function = "{$module}_vegas_enable";
    if (function_exists($function)) {
      $result = $function();
      if ($result === TRUE) {
        return $result;
      }
    }
  }

  return FALSE;
}

/**
 * Implements hook_vegas_enable().
 */
function vegas_vegas_enable() {
  // Match path if necessary.
  $pages = variable_get('vegas_pages', '');
  $visibility = variable_get('vegas_visibility', VEGAS_VISIBILITY_NOTLISTED);
  if ($pages) {
    // Convert path to lowercase. This allows comparison of the same path
    // with different case. Ex: /Page, /page, /PAGE.
    $pages = drupal_strtolower($pages);
    if ($visibility < VEGAS_VISIBILITY_PHP) {
      // Convert the Drupal path to lowercase
      $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
      // Compare the lowercase internal and lowercase path alias (if any).
      $page_match = drupal_match_path($path, $pages);
      if ($path != $_GET['q']) {
        $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
      }
      // When $visibility has a value of 0 (VEGAS_VISIBILITY_NOTLISTED),
      // vegas is displayed on all pages except those listed in $pages.
      // When set to 1 (VEGAS_VISIBILITY_LISTED), it is displayed only on those
      // pages listed in $pages.
      $page_match = !($visibility xor $page_match);
    }
    elseif (module_exists('php')) {
      $page_match = php_eval($pages);
    }
    else {
      $page_match = FALSE;
    }
  }
  else {
    $page_match = TRUE;
  }
  return $page_match;
}
